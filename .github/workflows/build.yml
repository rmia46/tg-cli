name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'  # Trigger on tag pushes like v1.0.0
  workflow_dispatch:  # Allows manual runs

permissions:
  contents: write  # Required to create releases and upload assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for PyInstaller

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller telethon rich python-dotenv prompt-toolkit

      # Build with PyInstaller
      - name: Build with PyInstaller
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            pyinstaller tg_cli.py --onefile --name tg-cli --add-data "code_templates.py;." --add-data "emoji_map.py;."
          else
            pyinstaller tg_cli.py --onefile --name tg-cli --add-data "code_templates.py:." --add-data "emoji_map.py:."
          fi
        shell: bash

      # Set release name without 'v'
      - name: Set release name
        id: set_name
        run: echo "RELEASE_NAME=$(echo ${{ github.ref_name }} | sed 's/^v//')" >> $GITHUB_ENV
        shell: bash

      # Archive executable
      - name: Archive executable
        run: |
          mkdir -p release
          mv dist/* release/
          ls -l release/

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-${{ matrix.os }}
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Set release name in this job
      - name: Set release name
        run: echo "RELEASE_NAME=$(echo ${{ github.ref_name }} | sed 's/^v//')" >> $GITHUB_ENV
        shell: bash

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Download all build artifacts
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Upload Windows artifact
      - name: Upload Windows artifact
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.RELEASE_NAME }}-windows-latest/tg-cli.exe
          asset_name: tg-cli-windows.exe
          asset_content_type: application/octet-stream

      # Upload Linux artifact
      - name: Upload Linux artifact
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.RELEASE_NAME }}-ubuntu-latest/tg-cli
          asset_name: tg-cli-linux
          asset_content_type: application/octet-stream

      # Upload macOS artifact
      - name: Upload macOS artifact
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.RELEASE_NAME }}-macos-latest/tg-cli
          asset_name: tg-cli-macos
          asset_content_type: application/octet-stream
